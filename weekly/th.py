# -*- coding: utf-8 -*-
"""th

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1di-qSHCno69BdQp89blQmj6shCuL_uH0
"""

import os
from datetime import datetime, timedelta, timezone

import pandas as pd
from dotenv import load_dotenv

from utils.helpers import Query, Redash
from utils.slack import SlackBot

def main():
  load_dotenv()

  redash = Redash(key=os.getenv("REDASH_API_KEY"), base_url=os.getenv("REDASH_BASE_URL"))

  dt_format = "%Y-%m-%d"

  local_now = datetime.now(timezone.utc) + timedelta(hours=7)
  start_date = (local_now - timedelta(days=local_now.weekday() + 7)).strftime(dt_format)

  output_date = datetime.strptime(start_date, dt_format).strftime("%d_%b_%Y")

  queries = [
              [
                  Query(5067, params={"week_start_date": start_date}),  # TH Weekly PS | Driver FT, Resurrect, Churn
                  Query(5221, params={"week_start_date": start_date}),  # TH Weekly PS | Incentive Spending
                  Query(5062, params={"week_start_date": start_date}),  # TH Weekly PS | Completed Trips
                  Query(5065, params={"week_start_date": start_date}),  # TH Weekly PS | Active Rider Weekly
                  Query(4933, params={"week_start_date": start_date}),  # TH Weekly PS | Completed Trips (ซ้ำกับ 5062 ใช่ไหม?)
                  Query(5071, params={"week_start_date": start_date}),  # TH Weekly PS | Avg Online Drivers
                  Query(5074, params={"week_start_date": start_date}),  # TH Weekly PS | Platform Fees Weekly
                  Query(5068, params={"week_start_date": start_date}),  # TH Weekly PS | Rider FT, Resurrect, Churn
                  Query(5073, params={"week_start_date": start_date}),  # TH Weekly PS | Promotion Spending Weekly
                  Query(5072, params={"week_start_date": start_date}), # TH Weekly PS | Average Fares Weekly
              ]
          ]

  for query_list in queries:
      redash.run_queries(query_list)

  # Fetch results
  df1 = redash.get_result(5067)  # TH Weekly PS | Driver FT, Resurrect, Churn
  df2 = redash.get_result(5221)  # TH Weekly PS | Incentive Spending
  df3 = redash.get_result(5062)  # TH Weekly PS | Completed Trips
  df4 = redash.get_result(5065)  # TH Weekly PS | Active Rider Weekly
  df5 = redash.get_result(4933)  # TH Weekly PS | Completed Trips (อาจซ้ำกับ 5062)
  df6 = redash.get_result(5071)  # TH Weekly PS | Avg Online Drivers
  df7 = redash.get_result(5074)  # TH Weekly PS | Platform Fees Weekly
  df8 = redash.get_result(5068)  # TH Weekly PS | Rider FT, Resurrect, Churn
  df9 = redash.get_result(5073)  # TH Weekly PS | Promotion Spending Weekly
  df10 = redash.get_result(5072) # TH Weekly PS | Average Fares Weekly


  # Construct weekly dataFrame
  df = pd.DataFrame()
  df["Completed Trips"] = df3.total_completed_trip
  df["Daily Completed"] = df3.daily_completed_trip
  df["% GROWTH"] = None



  # Rider weekly active users
  df["Rider WAU"] = df4.active_users
  df["Unique Completed Riders"] = df3.rider_weekly_complete
  df["Completed Riders / WAU"] = df['Unique Completed Riders'] / df['Rider WAU']
  df["Daily Average Online Driver"] = df6.avg_online_drivers
  df["Daily Average Completed Driver"] = df3.daily_avg_completed_drivers
  df["CD / OD"] = None
  df["Driver Weekly Complete"] = df3.driver_weekly_complete
  df["DAC/WC Drivers"] = df['Daily Average Completed Driver'] / df['Driver Weekly Complete']
  df["Average Completed Trip Per Rider"] = df['Completed Trips'] / df['Unique Completed Riders']
  df["Average Completed Trip Per Driver"] = df['Daily Completed'] / df['Driver Weekly Complete']

  # Driver
  df["New Driver Activated"] = df1.first_timers
  df["Resurrected Driver"] = df1.resurrect
  df["% Resurrect"] = None
  df["Churn Driver"] = df1.churn
  df["% Churn"] = None
  df["Net New Driver"] = df['New Driver Activated'] + df['Resurrected Driver'] - df['Churn Driver']


  # Rider
  df["New Rider Activated"] = df8.first_timers
  df["Resurrected Rider"] = df8.resurrect
  df["% Resurrect rider"] = None
  df["Churn Rider"] = df8.churn
  df["% Churn rider"] = None
  df["Net New Rider"] = df['New Rider Activated'] + df['Resurrected Rider'] - df['Churn Rider']
  df["R:D Ratio"] = df['Unique Completed Riders'] / df['Driver Weekly Complete']
  df["blank_1"] = None



  # fare and discount
  df["Average Fare"] = df10.average_fare
  df["blank_2"] = None
  df["Promo Spend (THB)"] = df9.discount
  df["Promo Spend (SGD)"] = None
  df["Promotion Trips"] = df9.discount_trips
  df["Promotion Trips / Completed Trips"] = df['Promotion Trips'] / df['Completed Trips']
  df["Average Promotion Value (THB)"] = df9.average_discount
  df["Average Promotion Value (SGD)"] = None
  df["Promo per completed ride (THB)"] = df['Promotion Trips'] / df['Completed Trips']
  df["Promo per completed ride (SGD)"] = None
  df["Promo per completed rider (SGD)"] = None
  df["Promo per completed trip/Average Fare"] = df['Promo per completed ride (THB)'] / df['Average Fare']
  df["blank_3"] = None

  df["Incentive Spend (THB)"] = df2.incentive_amount
  df["Incentive Spend (SGD)"] = None
  df["Incentive per completed driver"] = df['Incentive Spend (THB)'] / df['Driver Weekly Complete']
  df["Incentive per completed trip"] = df['Incentive Spend (THB)'] / df['Completed Trips']
  df["blank_4"] = None

  df["Total Spending (THB)"] = df['Promo Spend (THB)'] + df['Incentive Spend (THB)']
  df["Total Spending (SGD)"] = None
  df["blank_5"] = None
  df["Bike Revenue"] = df7.bike_total_system_fee
  df["Car Revenue"] = df7.car_total_system_fee
  df["Total Revenue"] = df['Bike Revenue'] + df['Car Revenue']
  df["blank_6"] = None
  df["blank_7"] = None

  # CAR
  df["Completed Trips (Car)"] = df3.car_completed_trip
  df["Car Complete/Total Complete"] = df['Completed Trips (Car)'] / df['Completed Trips']
  df["Daily Car Trips"] = df['Completed Trips (Car)'] / 7
  df["Completed Users"] = df5.rider_weekly_complete_car
  df["First Trip Users"] = df8.first_timers_car
  df["Resurrect Users"] = df8.resurrect_car
  df["Churned Users"] = df8.churn_car
  df["Average Fare (Car)"] = df10.car_average_fare
  df["Car Promo Spend (THB)"] = df9.car_discount
  df["Number of Promotion Trips (Car)"] = df9.car_discount_trips
  df["Average Promo Value (Car)"] = df9.average_car_discount
  df["Promo Per completed Ride (Car)"] = df['Car Promo Spend (THB)'] / df['Completed Trips (Car)']
  df["Promo per completed trip/Average Fare (Car)"] = df['Promo Per completed Ride (Car)'] / df['Average Fare (Car)']
  df["Promo Trips/Completed Trips (Car)"] = df['Number of Promotion Trips (Car)'] / df['Completed Trips (Car)']

  # BIKE
  df["blank_8"] = None
  df["Completed Trips (Bike)"] = df3.bike_completed_trip
  df["Bike Complete/Total Complete"] = df['Completed Trips (Bike)'] / df['Completed Trips']
  df["Daily Bike Trips"] = df['Completed Trips (Bike)'] / 7
  df["Bike Completed Users"] = df5.rider_weekly_complete_bike
  df["Bike First Trip Users"] = df8.first_timers_bike
  df["Bike Resurrect Users"] = df8.resurrect_bike
  df["Bike Churned Users"] = df8.churn_bike
  df["Average Fare (Bike)"] = df10.bike_average_fare
  df["Bike Promo Spend (THB)"] = df9.bike_discount
  df["Number of Promotion Trips (Bike)"] = df9.bike_discount_trips
  df["Average Promo Value (Bike)"] = df9.average_bike_discount
  df["Promo Per completed Ride (Bike)"] = df['Bike Promo Spend (THB)'] / df['Completed Trips (Bike)']
  df["Promo per completed trip/Average Fare (Bike)"] = df['Promo Per completed Ride (Bike)'] / df['Average Fare (Bike)']
  df["Promo Trips/Completed Trips (Bike)"] = df['Number of Promotion Trips (Bike)'] / df['Completed Trips (Bike)']

  df["blank_9"] = None
  df["Spend per trip"] = df['Total Spending (THB)'] / df['Completed Trips']
  df["Earn per trip"] = df['Total Revenue'] / df['Completed Trips']
  df["P/L"] = (df['Earn per trip'] / df['Spend per trip']) - 1

  df = df.copy()

  df = df.T
  df.columns = [f"{output_date}"]

  output_file = f"HK_Weekly_{output_date}.csv"

  df.to_csv(output_file)

  slack = SlackBot()
  slack.uploadFile(output_file,
                  os.getenv("SLACK_CHANNEL"),
                  f"Weekly Report for TH {output_date}")

if __name__ == '__main__':
        main()